module alchitry_top (
    input clk,              // 100MHz clock
    input rst_n,            // reset button (active low)
    output led[8],          // 8 user controllable LEDs
    input usb_rx,           // USB->Serial input
    output usb_tx,          // USB->Serial output
    output io_led[3][8],    // LEDs on IO Shield
    output io_segment[8],   // 7-segment LEDs on IO Shield
    output io_select[4],    // Digit select on IO Shield
    input io_button[5],     // 5 buttons on IO Shield
    input io_dip[3][8]      // DIP switches on IO Shield
) {
    
    sig rst                 // reset signal
    
    .clk(clk) {
        // The reset conditioner is used to synchronize the reset signal to the FPGA
        // clock. This ensures the entire FPGA comes out of reset at the same time.
        reset_conditioner reset_cond
    }
    
    const COLUMN_DIMENSION = 16
    const ROW_DIMENSION = 16
    
    index_reverser reverser(#COLUMN_DIMENSION(COLUMN_DIMENSION), #ROW_DIMENSION(ROW_DIMENSION))

    const SIZE = $clog2(COLUMN_DIMENSION * ROW_DIMENSION)
    index_reverser_hybrid reverser_hybrid(#COLUMN_DIMENSION(COLUMN_DIMENSION), #ROW_DIMENSION(ROW_DIMENSION), #SIZE(SIZE))
    
    const LED_COLORS = {
        2b10,
        2b00,
        2b00,
        2b00,
        2b00,
        2b00,
        2b00,
        2b00,
        2b00,
        2b00,
        2b00,
        2b00,
        2b00,
        2b00,
        2b01,
        2b11
    }
    
    sig color_index[$clog2($width(LED_COLORS,0))]
    
    
    always {
        reset_cond.in = ~rst_n  // input raw inverted reset signal
        rst = reset_cond.out    // conditioned reset
        
        led = 8h00              // turn LEDs off
        
        usb_tx = usb_rx         // loop serial port
        
        io_led = 3x{{8h00}}
        io_segment = 8hff
        io_select = 4hf
        reverser.input_address = io_dip[0] 
        reverser_hybrid.input_address = io_dip[0]
        
        if (io_dip[2][7]){
            led = b01
            io_led[2] = reverser.output_address
            color_index = reverser.output_address
        }
        else{
            led = b11     
            io_led[2] = reverser_hybrid.output_address
            color_index = reverser_hybrid.output_address
        }
        
        io_led[0] = io_dip[0]
        io_led[1] = LED_COLORS[color_index]
        
        
    }
}