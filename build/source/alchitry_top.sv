/*
    This file was generated automatically by Alchitry Labs 2.0.28-BETA.
    Do not edit this file directly. Instead edit the original Lucid source.
    This is a temporary file and any changes made to it will be destroyed.
*/

module alchitry_top (
        input wire clk,
        input wire rst_n,
        output reg [7:0] led,
        input wire usb_rx,
        output reg usb_tx,
        output reg [2:0][7:0] io_led,
        output reg [7:0] io_segment,
        output reg [3:0] io_select,
        input wire [4:0] io_button,
        input wire [2:0][7:0] io_dip
    );
    logic rst;
    localparam _MP_STAGES_988298862 = 3'h4;
    logic M_reset_cond_in;
    logic M_reset_cond_out;
    
    reset_conditioner #(
        .STAGES(_MP_STAGES_988298862)
    ) reset_cond (
        .clk(clk),
        .in(M_reset_cond_in),
        .out(M_reset_cond_out)
    );
    
    
    localparam COLUMN_DIMENSION = 5'h10;
    localparam ROW_DIMENSION = 5'h10;
    localparam _MP_ROW_DIMENSION_2138499389 = 5'h10;
    localparam _MP_COLUMN_DIMENSION_2138499389 = 5'h10;
    logic [7:0] M_reverser_input_address;
    logic [7:0] M_reverser_output_address;
    
    index_reverser #(
        .ROW_DIMENSION(_MP_ROW_DIMENSION_2138499389),
        .COLUMN_DIMENSION(_MP_COLUMN_DIMENSION_2138499389)
    ) reverser (
        .input_address(M_reverser_input_address),
        .output_address(M_reverser_output_address)
    );
    
    
    localparam SIZE = 4'h8;
    localparam _MP_ROW_DIMENSION_859725186 = 5'h10;
    localparam _MP_COLUMN_DIMENSION_859725186 = 5'h10;
    localparam _MP_SIZE_859725186 = 4'h8;
    logic [7:0] M_reverser_hybrid_input_address;
    logic [7:0] M_reverser_hybrid_output_address;
    
    index_reverser_hybrid #(
        .ROW_DIMENSION(_MP_ROW_DIMENSION_859725186),
        .COLUMN_DIMENSION(_MP_COLUMN_DIMENSION_859725186),
        .SIZE(_MP_SIZE_859725186)
    ) reverser_hybrid (
        .input_address(M_reverser_hybrid_input_address),
        .output_address(M_reverser_hybrid_output_address)
    );
    
    
    localparam logic [15:0][1:0] LED_COLORS = {{2'h2, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h1, 2'h3}};
    logic [3:0] color_index;
    always @* begin
        M_reset_cond_in = ~rst_n;
        rst = M_reset_cond_out;
        led = 8'h0;
        usb_tx = usb_rx;
        io_led = {{8'h0, 8'h0, 8'h0}};
        io_segment = 8'hff;
        io_select = 4'hf;
        M_reverser_input_address = io_dip[1'h0];
        M_reverser_hybrid_input_address = io_dip[1'h0];
        if (io_dip[2'h2][3'h7]) begin
            led = 2'h1;
            io_led[2'h2] = M_reverser_output_address;
            color_index = M_reverser_output_address;
        end else begin
            led = 2'h3;
            io_led[2'h2] = M_reverser_hybrid_output_address;
            color_index = M_reverser_hybrid_output_address;
        end
        io_led[1'h0] = io_dip[1'h0];
        io_led[1'h1] = LED_COLORS[color_index];
    end
    
    
endmodule